#!/usr/bin/env zsh --no-rcs
# csb's awesome prompt theme

# Print the help text.
function prompt_csb_help {
	echo "Usage: prompt csb"
}

# Estimate the length to which a string with prompt escapes would expand.
function prompt_csb_len {
	# We manually expand the input with `print -rP`. The actual values of the
	# expansion may be wrong since we're not actually in the context of the
	# prompt. Usually this just means the colors are wrong. From that point,
	# we strip escape sequences then take the length.
	local expanded=$(print -rP $1)
	local stripped=${(S)expanded//$'\e'\[*([0-9;])m/}
	print -n ${#stripped}
}

# A widget to print the number of background jobs, if any.
function prompt_csb_bg_widget {
	alt_color=$3
	if [[ -n $(jobs) ]]
	then
		print -n "${alt_color}%j"
	fi
}

# A VCS widget - only drawn when inside a repo.
function prompt_csb_vcs_widget {
	# Retrieve the colors as arguments.
	info_color=$2
	alt_color=$3

	# Get output from `vcs_info`.
	vcs_info prompt_csb
	local repo=$vcs_info_msg_0_
	local branch=$vcs_info_msg_1_
	local action=$vcs_info_msg_2_

	# If we're in a repo, print out the message.
	if [[ -n $repo ]]
	then
		print -n "${info_color}${branch}"
		if [[ -n $action ]]
		then
			print -n " ${alt_color}(${action})"
		fi
		print -n "%f"
	fi
}

# Print username, hostm and path.
# This is almost an `scp` compatible path, but with extra spaces.
function prompt_csb_hostpath_widget {
	alt_color=$3
	print -n "%f%n @ %m : %~"
}

# Get the current context for zstyle.
function prompt_csb_zstyle_context {
	if [[ -n "$TMUX" ]]
	then
		print -n ":prompt_csb:tmux:${HOST}"
	elif [[ -n "$SSH_CONNECTION" ]]
	then
		print -n ":prompt_csb:ssh:${HOST}"
	else
		print -n ":prompt_csb:local:${HOST}"
	fi
}

# Called before zsh reads the next command and before the prompt is drawn.
function prompt_csb_precmd {
	# Determine the zstyle context.
	local context="$(prompt_csb_zstyle_context)"

	# Retrieve the config from zstyle.
	local max_cols main_color info_color alt_color err_color
	zstyle -s "$context" max_cols max_cols
	zstyle -s "$context" main_color main_color
	zstyle -s "$context" info_color info_color
	zstyle -s "$context" alt_color alt_color
	zstyle -s "$context" err_color err_color

	# Determine the width of the prompt
	local cols
	if (( $COLUMNS < $max_cols ))
	then
		cols=$COLUMNS
	else
		cols=$max_cols
	fi

	# Wrap the colors in prompt expansion syntax.
	# The `main_color` becomes `err_color` when the exit status is non-zero.
	info_color="%F{$info_color}"
	alt_color="%F{$alt_color}"
	err_color="%F{$err_color}"
	main_color="%(?.%F{$main_color}.$err_color)"
	local colors=($main_color $info_color $alt_color $err_color)

	# Build the widget segment for the top line.
	#
	# The widgets are names of functions stored in zstyle. We call each
	# function, passing in the colors, and concatenate their outputs.
	#
	# We only insert a widget if:
	# 1. it is non-empty, and
	# 2. it does not cause the the top line to exceed the number of columns.
	local widget_array=() widgets=""
	zstyle -a "$context" widgets widget_array
	for widget_fn in $widget_array
	do
		local w=$($widget_fn $colors)
		local len=$(( $(prompt_csb_len $widgets) + $(prompt_csb_len $w) + 6 ))
		if [[ -n "$w" ]] && (( $len < $cols ))
		then
			w="${w}${main_color}"  # Reset the color.
			widgets="──[ ${w} ]${widgets}"
		fi
	done

	# Pad the widgets to the full width of the terminal.
	# This requires us to reason about the difference in length between the
	# expanded and unexpanded forms.
	local unexpanded_len=${#widgets}
	local expanded_len=$(prompt_csb_len $widgets)
	local diff=$(($unexpanded_len - $expanded_len))
	local len=$(($cols - 1 + $diff))
	local widgets=${(l:$len::─:)widgets}

	# Set the prompt.
	local lf=$'\n'
	local prompt_char="%f%(!.#.$)"  # This is `$` as user and `#` as root.
	local top_line="${main_color}╭${widgets}${lf}"
	local bot_line="${main_color}╰ ${prompt_char}%f "
	export PROMPT="${lf}${top_line}${bot_line}"
}

# Called whenever the theme is activated.
function prompt_csb_setup {
	autoload -Uz add-zsh-hook
	autoload -Uz vcs_info

	# The prompt is actually set in the precmd hook.
	# The zsh prompt library automatically cleans up this hook.
	add-zsh-hook precmd prompt_csb_precmd

	# Prompt options to enable while this theme is active,
	# e.g. `prompt_opts=(percent)` is like `setopt prompt_percent`, but the
	# option is reverted to its original value when the theme is disabled.
	# http://zsh.sourceforge.net/Doc/Release/Options.html#Prompting
	prompt_opts=(cr percent)

	# Set the default config in zstyle.
	zstyle -T ':prompt_csb:*' max_cols   && zstyle ':prompt_csb:*' max_cols 200
	zstyle -T ':prompt_csb:*' main_color && zstyle ':prompt_csb:*' main_color 243
	zstyle -T ':prompt_csb:*' info_color && zstyle ':prompt_csb:*' info_color green
	zstyle -T ':prompt_csb:*' alt_color  && zstyle ':prompt_csb:*' alt_color  blue
	zstyle -T ':prompt_csb:*' err_color  && zstyle ':prompt_csb:*' err_color  red

	# Set the default widgets.
	if zstyle -T ':prompt_csb:*' widgets
	then
		zstyle ':prompt_csb:*' widgets \
			prompt_csb_hostpath_widget \
			prompt_csb_vcs_widget \
			prompt_csb_bg_widget
	fi

	# Set the vcs_info formats.
	zstyle ':vcs_info:*:prompt_csb:*' max-exports 3
	zstyle ':vcs_info:*:prompt_csb:*' formats "%r" "%b" "%a"
	zstyle ':vcs_info:*:prompt_csb:*' actionformats "%r" "%b" "%a"
}

[[ -o kshautoload ]] || prompt_csb_setup "$@"
